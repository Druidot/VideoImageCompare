
!pip install facenet_pytorch
import cv2
import torch
from torchvision import transforms
from facenet_pytorch import MTCNN, InceptionResnetV1
import numpy as np

# Load models
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
mtcnn = MTCNN(device=device)
resnet = InceptionResnetV1(pretrained='vggface2').eval().to(device)

# Load the still image
image = cv2.imread('/content/trump1.jpg')

# Detect faces in the still image
boxes, _ = mtcnn.detect(image)

if boxes is not None and boxes[0] is not None:
    box = boxes[0]
    face = image[int(box[1]):int(box[3]), int(box[0]):int(box[2])]
    transform = transforms.Compose([
        transforms.ToPILImage(),
        transforms.Resize((160, 160)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5]),
    ])
    face_tensor = transform(face).unsqueeze(0).to(device)
    embedding_image = resnet(face_tensor).detach().cpu().numpy()[0]

    # Load the video
    cap = cv2.VideoCapture('/content/Trump says he can end Ukraine war in a day.mp4')

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Detect faces in the current frame
        boxes, _ = mtcnn.detect(frame)

        if boxes is not None and boxes[0] is not None:
            box = boxes[0]
            face = frame[int(box[1]):int(box[3]), int(box[0]):int(box[2])]
            face_tensor = transform(face).unsqueeze(0).to(device)
            embedding_video = resnet(face_tensor).detach().cpu().numpy()[0]

            # Calculate the cosine similarity between the embeddings
            similarity = np.dot(embedding_image, embedding_video) / (np.linalg.norm(embedding_image) * np.linalg.norm(embedding_video))
            similarity_percentage = round(similarity * 100, 2)

            # Print the result
            if similarity_percentage >= 70:
                print(f"Matching: Yes with {similarity_percentage}% similarity")
            else:
                print(f"Matching: No with {similarity_percentage}% similarity")

    cap.release()
    cv2.destroyAllWindows()
else:
    print("No faces detected in the image.")
